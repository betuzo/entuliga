.tt-menu,
.twitter-typeahead {
  width: 100%;
}

.twitter-typeahead {
  margin-top: 5px;
}

.tt-suggestion {
  padding: 3px 20px;
  line-height: 24px;
  background-color: #efefef;
}

.tt-suggestion:hover {
  cursor: pointer;
  color: #fff;
  background-color: #0097cf;
}

.tt-suggestion.tt-cursor {
  color: #fff;
  background-color: #0097cf;

}

.tt-suggestion p {
  margin: 0;
}

.empty-message {
  padding: 5px 10px;
  text-align: center;
}

.modal-base {
  position: relative;
  text-align: center;
  width: 100%;
  height: 100%;
}

.modal-base img {
  position: absolute;
  margin: auto;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.avatar {
  float: left;
  position: relative;

  -webkit-border-radius: 50%;
  -moz-border-radius: 50%;
  border-radius: 50%;

  -webkit-box-shadow: 0 0 0 3px #fff, 0 0 0 4px #999, 0 2px 5px 4px rgba(0, 0, 0, .2);
  -moz-box-shadow: 0 0 0 3px #fff, 0 0 0 4px #999, 0 2px 5px 4px rgba(0, 0, 0, .2);
  box-shadow: 0 0 0 3px #fff, 0 0 0 4px #999, 0 2px 5px 4px rgba(0, 0, 0, .2);
}

.avatar-ss {
  width: 1.5em;
  height: 1.5em;
}

.avatar-sm {
  width: 3em;
  height: 3em;
}


/*
Animated skeleton screen using CSS.

Create shapes using gradients that simulate solids.

Use `:empty` pseduo-class to show skeleton screen background only while container has no content (ex: for the "loading" state). When content is added to the container element, the pseudo-class selector won't match anymore and the skeleton screen will be removed automatically; no need to toggle a separate class on the container.

See: https://developer.mozilla.org/en-US/docs/Web/CSS/:empty

Animating one layer of the background which is a tilted linear gradient with white in the middle to achieve shine effect.
*/

.skeleton:empty {
  margin: auto;
  width: 500px;
  height: 600px;
  /* change height to see repeat-y behavior */
  background-image: radial-gradient( circle 50px at 50px 50px, lightgray 99%, transparent 0),
  linear-gradient( 100deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.5) 50%, rgba(255, 255, 255, 0) 80%),
  linear-gradient( lightgray 20px, transparent 0),
  linear-gradient( lightgray 20px, transparent 0),
  linear-gradient( lightgray 20px, transparent 0),
  linear-gradient( lightgray 20px, transparent 0);

  background-repeat: repeat-y;

  background-size: 100px 200px, /* circle */
  50px 200px, /* highlight */
  150px 200px,
  350px 200px,
  300px 200px,
  250px 200px;

  background-position: 0 0, /* circle */
  0 0, /* highlight */
  120px 0,
  120px 40px,
  120px 80px,
  120px 120px;

  animation: shine 1s infinite;
}

@keyframes shine {
  to {
    background-position: 0 0,
    100% 0, /* move highlight to right */
    120px 0,
    120px 40px,
    120px 80px,
    120px 120px;
  }
}
